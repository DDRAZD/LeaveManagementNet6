when creating a repositoty that needs to access the built in user functions, you can use dependancy injection to 
add the user manager to the repository:

 private readonly UserManager<Employee> userManager;

        public LeaveAllocationRepository(ApplicationDbContext context, UserManager<Employee> userManager): base(context)
        {
            this.userManager = userManager;
        }

so in addition to providing the dbContext, you are also injecting the user manager. 

This allows you to interact with the user DB in the different tasks of the repository - for example, getting all the users in a specific role:
 //get all employees in range so we can allocate them the leave:
var employees = await userManager.GetUsersInRoleAsync(Roles.User);

-------------------------------
adding a controller: add with read/write functions so to get all the code ready (you wont get views with it)

---------------------
when using async tasks, use Task<IActionResult> and not Task<ActionResult> (use the interface and not the class), as IActionResult is extended and 
will be preferable in .Net Core

------------------------
as usual, you do not want to use the data model in the controller or any where in the view. it has to be a view model. 

you can have a view model per purpose as opposed to one view model to all. Similar to how you built in MVC 5 vm for register, vm for login etc
Think of the purpose (page) you are building, and generate a view model for that one
In this case, EmployeeListVM vs. just EmployeeVM
-----------------------
when adding a view, the IDE does not know how to properly tightly bind the view to the VM and is looking for a data structure in the DB Context
if you add a view with the help of the IDE, asking it to create a view with model it will also add in your DB Context another DbSet and will 
change you DB in the next migration -> you have to delete it after it was generated:
delete this: public DbSet<LeaveManagement.Web.Models.EmployeeListVM> EmployeeListVM { get; set; }

because Employee is an identity class, you wont even have the option of selecting it in the model when adding the view, so you have to select the VM
and that will manipulate your DB context that you have to manually fix
--------------
for any controller, you need an Index action; not IndexAsync not any other name, index and thats it. Otherwise, you will end up with 404 errors and wont 
know why

----------------------
it is not a bad pattern to manipulate VMs within the repository - this reduces the inteligence in the controller; repository may in fact both deal with 
data model and with view model
in essence, as the repository is the only place you can "safely" talk with the DB via contxet, it is in your best interest to drive the complexity there
-----------------------
when you pull from DB and want to leverage another table using the foreign key, you do this:
var allocations = await context.LeaveAllocations
                .Include(a => a.LeaveType)
                .Where(y=>y.EmployeeId==employeeId).ToListAsync();

                ------------------

common error with model state, leaving the properties non-nullable; then model state fails as says there is a null. make sure to add to the ties between the Viewmodels nullable.

I.e.:
public EmployeeListVM? Employee { get; set; }

as model state might fail on form submission without the "?" as thinks null is not allowed

you are essentially doing an inner-join with the word "include"-> this pulls in from the LeaveType table the leave types to the same var

-------------------------------

when mapping relational items into VM, you map each item separately. For example, if allocations had a foreign key towards employees, you will map allocations to allocationsVM, and then set an employeeVM to map to employee; it is like building represenation of the db in the VM
--------------------------

adding
<script>
      $(function(){
         $('.table').DataTable();
      });
     </script>

     to the layout page, will call the script for the specialized data tables any place you used the class "table" and allow all tables to be same format

-------------------
Drop down list - instanciate a SelectList
ViewData["LeaveTypeId"] = new SelectList(_context.LeaveTypes, "Id", "Name");

the first parameter is the query to get the list
Second one is which value to use to organize
third one is what to display

it will be within the <select> tag like so:
<option value = "[first id value]"> [corresponding name to that id]</option>
<option value = "[second id value]"> [corresponding name to that id]</option>
.....


------------------------------------------------------
addin a js library for date picker
https://jqueryui.com/datepicker/
go to project level - add-> client side library->search for jqueryUI

on https://jqueryui.com/datepicker/ you can "view source" and see what it takes to run this library
 <script src="https://code.jquery.com/ui/1.13.2/jquery-ui.js"></script> add this to the layout as usual so you can use it everywhere
 add to the layout where you have already a $(function) sciprt:
 $( "#datepicker" ).datepicker();
 to avoid two "id"s with same name, you should add it as a class so:
 $( ".datepicker" ).datepicker(); (not # but .)

 <link rel="stylesheet" href="//code.jquery.com/ui/1.13.2/themes/base/jquery-ui.css"> add to the layout to the top where style sheet goes

 make sure in the input forms to use type="text" when handling datepicker
 ----------------------

 adding this to program.cs: builder.Services.AddHttpContextAccessor(); allows you access to the Http context within repostitoy (i.e. beyond the controller but in the entire application). This is useful for obtaning the user id outside of the controller
 then inject this in the repository:

 IHttpContextAccessor httpContextAccessor
 you will also need the unser manager


 --------------------------
 in view model, you can inherit from IValidatableObject and then you can actually validate things like End Date is After Start Date if 
 you have dates in the fields as an example - simply allows you to add logic around it

 yield return new ValidationResult("the start date cannot be after end date",new[] {nameof(StartDate), nameof(EndDate)});
 "yield" allows you to return mulitple things - basically it is "stop here, return and then come back to continue"

 libraries to support loging:

 serilog.aspnetcore
 serilog.expressions
 serliog.sinks.seq

 go to nuget package manager to install

 <PackageReference Include="Serilog.AspNetCore" Version="6.1.0" />
    <PackageReference Include="Serilog.Expressions" Version="3.4.1" />
    <PackageReference Include="Serilog.Sinks.Seq" Version="5.2.2" />